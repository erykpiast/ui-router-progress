angular.module("ui-router-progress",["ui-router-progress.state-progress-monitor","ui-router-progress.state-progress-indicator"]),angular.module("ui-router-progress.state-progress-indicator",["ui-router-progress.state-progress-monitor"]).directive("uiStateProgressIndicator",["stateProgressMonitor",function(a){return{restrict:"AC",link:function(b,c){var d=a.on("loadstart",function(){c.addClass("is-loading")}),e=a.on("loadend",function(){c.removeClass("is-loading")});b.$on("$destroy",function(){d(),e()})}}}]),angular.module("ui-router-progress.state-progress-monitor",["angular-event-emitter"]).provider("stateProgressMonitor",function(){function a(){if(arguments.length){for(var a=[],c=0,d=arguments.length;d>c;c++){var e=arguments[c];if(angular.isDefined(e)){if(angular.isString(e.name))e=e.name;else if(!angular.isString(e))throw new Error("arguments have to be state objects or state names");-1===b.indexOf(e)&&(a.push(e),b.push(e))}}var f=!1;return function(){if(!f){for(var a=0,c=arguments.length;c>a;a++){var d=b.indexOf(arguments[a]);-1!==d&&b.splice(d,1)}f=!0}}}throw new Error("arguments have to be state objects or state names")}var b=[];return{$get:["$rootScope","EventEmitter",function(a,c){function d(a,c){-1===b.indexOf(c.name)&&f.emit("loadstart")}function e(a,c){-1===b.indexOf(c.name)&&f.emit("loadend")}var f=new c;return a.$on("$stateChangeStart",d),a.$on("$stateChangeSuccess",e),a.$on("$stateChangeError",e),a.$on("$stateNotFound",function(a,b){e(a,{name:b.to})}),{on:f.on.bind(f)}}],exclude:a}});